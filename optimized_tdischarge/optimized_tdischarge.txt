COPY PASTE THIS TO ARDUINO IDE AND UPLOAD THIS TO TEENSY TO USE THIS FOLDER


#include <ADC.h>

const int chargePin  = 13;
const int voltagePin = A1;   // ADC0
const int thermPin   = A8;   // ADC1

// must match Python's S_HIGH, S_LOW, T_SAMPLES:
const uint16_t S_HIGH   = 50;    // # of high-speed voltage samples
const uint16_t S_LOW    = 16000; // # of low-speed voltage samples
const int      T_SAMPLES =  500; // # of thermistor reads to average

ADC *adc = new ADC();

// raw buffers
uint16_t bufHigh[S_HIGH];
uint16_t bufLow[S_LOW];

void setup() {
  Serial.begin(115200);
  while (!Serial) {}

  pinMode(chargePin, OUTPUT);
  pinMode(voltagePin, INPUT);
  pinMode(thermPin, INPUT);
}

void loop() {
  // wait for 'S' from Python
  if (!Serial.available() || Serial.read() != 'S') return;

  // --- 1) Charge the cap ---
  digitalWrite(chargePin, HIGH);
  adc->adc0->setAveraging(32);
  adc->adc0->setResolution(10);
  adc->adc0->setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
  adc->adc0->setSamplingSpeed( ADC_SAMPLING_SPEED::LOW_SPEED);

  delay(100);
  uint32_t sum1 = 0;
  for (int j = 0; j < 32; j++) {
    adc->adc0->startSingleRead(voltagePin);
    while (adc->adc0->isConverting());
    sum1 += adc->adc0->readSingle();
  }

  bufHigh[0] = sum1 / 32;
  digitalWrite(chargePin, LOW);

  // --- 2) High-speed phase on A1 ---
  adc->adc0->setAveraging(1);
  adc->adc0->setResolution(10);
  adc->adc0->setConversionSpeed(ADC_CONVERSION_SPEED::VERY_HIGH_SPEED);
  adc->adc0->setSamplingSpeed( ADC_SAMPLING_SPEED::VERY_HIGH_SPEED);
  unsigned long t0 = micros();
  for (uint16_t i = 1; i < S_HIGH; i++) {
    adc->adc0->startSingleRead(voltagePin);
    while (adc->adc0->isConverting());
    bufHigh[i] = adc->adc0->readSingle();
  }
  unsigned long totalHigh = micros() - t0;

  // --- 3) Low-speed phase 1 on A1 (first 150 samples) ---
  adc->adc0->setAveraging(1);
  adc->adc0->setResolution(12);
  adc->adc0->setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
  adc->adc0->setSamplingSpeed( ADC_SAMPLING_SPEED::LOW_SPEED);
  t0 = micros();
  for (uint16_t i = 0; i < 1200; i++) {
    adc->adc0->startSingleRead(voltagePin);
    while (adc->adc0->isConverting());
    bufLow[i] = adc->adc0->readSingle();
  }
  unsigned long totalLow1 = micros() - t0;

  // --- 4) Low-speed phase 2 on A1 (remaining samples with averaging) ---
  adc->adc0->setAveraging(4);

  t0 = micros();
  for (uint16_t i = 1200; i < S_LOW; i++) {
    adc->adc0->startSingleRead(voltagePin);
    while (adc->adc0->isConverting());
    bufLow[i] = adc->adc0->readSingle();
  }
  unsigned long totalLow = micros() - t0;

  // --- 5) Average T_SAMPLES on A8 for thermistor ---
  adc->adc1->setAveraging(32);
  adc->adc1->setResolution(10);
  adc->adc1->setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
  adc->adc1->setSamplingSpeed( ADC_SAMPLING_SPEED::LOW_SPEED);
  uint32_t sum = 0;
  for (int j = 0; j < T_SAMPLES; j++) {
    adc->adc1->startSingleRead(thermPin);
    while (adc->adc1->isConverting());
    sum += adc->adc1->readSingle();
  }
  float avgTherm = float(sum) / float(T_SAMPLES);

  // --- 6) Send data ---
  Serial.write(reinterpret_cast<uint8_t*>(bufHigh), S_HIGH * sizeof(uint16_t));
  Serial.write(reinterpret_cast<uint8_t*>(&totalHigh), sizeof(totalHigh));
  Serial.write(reinterpret_cast<uint8_t*>(bufLow), S_LOW * sizeof(uint16_t));
  Serial.write(reinterpret_cast<uint8_t*>(&totalLow1), sizeof(totalLow1));
  Serial.write(reinterpret_cast<uint8_t*>(&totalLow), sizeof(totalLow));
  Serial.write(reinterpret_cast<uint8_t*>(&avgTherm), sizeof(avgTherm));

  // flush any extra bytes
  while (Serial.available()) Serial.read();
}
